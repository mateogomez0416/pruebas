/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/helpers/awarenessWidget.js":
/*!****************************************!*\
  !*** ./src/helpers/awarenessWidget.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getAwarenessWidgetCustomStyles": () => (/* binding */ getAwarenessWidgetCustomStyles)
/* harmony export */ });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ */ "./src/helpers/index.js");


/**
 * Takes from the attributes of the Addi Script Tag
 * the CSS styles required for the awareness widget
 * @param {object} addiScriptTag the node element of the script htmlTag
 * @returns {string} stringified JSON Object
 */
const getAwarenessWidgetCustomStyles = (addiScriptTag) => {
    const BannerCustomStyles = {
        borderColor: addiScriptTag.getAttribute('widget-border-color'),
        borderRadius: addiScriptTag.getAttribute('widget-border-radius'),
        fontColor: addiScriptTag.getAttribute('widget-font-color'),
        fontFamily: addiScriptTag.getAttribute('widget-font-family'),
        fontSize: addiScriptTag.getAttribute('widget-font-size'),
        badgeBackgroundColor: addiScriptTag.getAttribute('widget-badge-background-color'),
        infoBackgroundColor: addiScriptTag.getAttribute('widget-info-background-color'),
        iconType: addiScriptTag.getAttribute('widget-addi-icon-type'),
        iconSize: addiScriptTag.getAttribute('widget-addi-icon-size'),
        margin: addiScriptTag.getAttribute('widget-margin')
    }

    const ModalCustomStyles = {
        backgroundColor: addiScriptTag.getAttribute('modal-background-color'),
        fontColor: addiScriptTag.getAttribute('modal-font-color'),
        fontFamily: addiScriptTag.getAttribute('modal-font-family'),
        priceColor: addiScriptTag.getAttribute('modal-price-color'),
        badgeBackgroundColor: addiScriptTag.getAttribute('modal-badge-background-color'),
        badgeFontColor: addiScriptTag.getAttribute('modal-badge-font-color'),
        badgeBorderRadius: addiScriptTag.getAttribute('modal-badge-border-radius'),
        cardColor: addiScriptTag.getAttribute('modal-card-color'),
        buttonBorderColor: addiScriptTag.getAttribute('modal-button-border-color'),
        buttonBorderRadius: addiScriptTag.getAttribute('modal-button-border-radius'),
        buttonBackgroundColor: addiScriptTag.getAttribute('modal-button-background-color'),
        buttonFontColor: addiScriptTag.getAttribute('modal-button-font-color')
    }

    return JSON.stringify({
        widget: (0,___WEBPACK_IMPORTED_MODULE_0__.removeEmptyKeys)(BannerCustomStyles),
        modal: (0,___WEBPACK_IMPORTED_MODULE_0__.removeEmptyKeys)(ModalCustomStyles)
    });
}


/***/ }),

/***/ "./src/helpers/commons.js":
/*!********************************!*\
  !*** ./src/helpers/commons.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getCookie": () => (/* binding */ getCookie),
/* harmony export */   "parseTemplateString": () => (/* binding */ parseTemplateString),
/* harmony export */   "getPageCategory": () => (/* binding */ getPageCategory),
/* harmony export */   "removeEmptyKeys": () => (/* binding */ removeEmptyKeys),
/* harmony export */   "getReferenceNode": () => (/* binding */ getReferenceNode),
/* harmony export */   "insertIntoDOM": () => (/* binding */ insertIntoDOM),
/* harmony export */   "isMobileDevice": () => (/* binding */ isMobileDevice),
/* harmony export */   "isPrivateMode": () => (/* binding */ isPrivateMode)
/* harmony export */ });
/* harmony import */ var _privateModeValidator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./privateModeValidator */ "./src/helpers/privateModeValidator.js");


/**
 * Get the value of a given Cookie name
 * @param {string} name is the name of the cookie to be read  
 * @returns it returns the value store in the requested cookie
 */
const getCookie = (name) => {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);

    if (parts.length === 2) return parts.pop().split(';').shift();
};


/**
 * Parse a given string
 * @param {string} template is the string to with the params to be replaced 
 * @param {object} params is a key/value pair object with the name of the params and values to be replaced
 * @returns return the parsed string with the values printed of the requested parameters
 */
 const parseTemplateString = (template, params) => {
    if (!params) {
        return template;
    }

    Object
        .keys(params)
        .forEach(key => template = template.replace(new RegExp(`{{${key}}}`, 'g'), params[key]()));

    return template;
};


/**
 * This function will identify the current page type acoording to URL pathName
 * @returns {string} returns page type "Home" or "Product"
 */
const getPageCategoryFromUrl = () => {
    const URLpathName = window.location.pathname

    if (URLpathName === '/') {
        return 'Home';
    }
    
    if (URLpathName.endsWith('/p') || URLpathName.includes('/p?')) {
        return 'Product';
    }

    return '';
};

/**
 * This function will identify the current page type using the window.dataLager property 'pageCategory'
 * or into the ecommerce URL pathName
 * @returns return a string with the value "Home" or "Product", depending on page type
 */
 const getPageCategory = () => {
    return (window.dataLayer &&
    (window?.dataLayer[0]?.pageCategory || (window?.dataLayer?.find(layer => layer.pageCategory) || {}).pageCategory))
    ?? getPageCategoryFromUrl();
};


/**
 * This function will take an object and return a new one without empty keys
 * @returns {object} return a new object with no empty keys
 */
const removeEmptyKeys = (Obj) => {
    const objKeys = Object.keys(Obj);
    const newObject = {};
    
    for (let i = 0; i < Object.keys(Obj).length; i++) {
        if (!!Obj[objKeys[i]]) {
            newObject[objKeys[i]] = Obj[objKeys[i]];
        }
    }

    return newObject;
};


/**
 * This function will take an object and return a new one without empty keys
 * @param {string} selector Selector name
 * @param {string[]} genericSelectorsRef Array of default selectors
 * @returns {any} return a new object with no empty keys
 */
const getReferenceNode = (selector, genericSelectorsRef) => {

    if (selector) {
        const nodeElementRef = document.querySelector(selector);
        if (nodeElementRef) {
            return nodeElementRef;
        }
    }

    if (genericSelectorsRef) {
        for (let i = 0; i < genericSelectorsRef.length; i++) {
            const nodeElementRef = document.querySelector(genericSelectorsRef[i]);
            if (nodeElementRef) {
                return nodeElementRef;
            }
        }

    }

    return null;
};


/**
 * This function will insert a newNode into the DOM just after the given referenceNode
 * @param {*} newNode Node to be insert into the DOM
 * @param {*} referenceNode Node taken as reference to insert the new node before it
 * @returns {void}
 */
const insertIntoDOM = (newNode, referenceNode) => {
    referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
}

const isMobileDevice = Boolean(navigator
    .userAgent
    .match(/Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile|WPDesktop/i));


const isPrivateMode = () => {
    return new Promise((resolve, reject) => {
        (0,_privateModeValidator__WEBPACK_IMPORTED_MODULE_0__.detectIncognito)(function(obj) {
            if (obj.isPrivate) {
                resolve(true);
            } else {
                resolve(false);
            }
          });
    })
}

/***/ }),

/***/ "./src/helpers/index.js":
/*!******************************!*\
  !*** ./src/helpers/index.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getAwarenessWidgetCustomStyles": () => (/* reexport safe */ _awarenessWidget__WEBPACK_IMPORTED_MODULE_0__.getAwarenessWidgetCustomStyles),
/* harmony export */   "getCheckoutBtnSelectorRef": () => (/* reexport safe */ _oneClickSelectors__WEBPACK_IMPORTED_MODULE_1__.getCheckoutBtnSelectorRef),
/* harmony export */   "getOneClickSelectorsBySlug": () => (/* reexport safe */ _oneClickSelectors__WEBPACK_IMPORTED_MODULE_1__.getOneClickSelectorsBySlug),
/* harmony export */   "getCookie": () => (/* reexport safe */ _commons__WEBPACK_IMPORTED_MODULE_2__.getCookie),
/* harmony export */   "getPageCategory": () => (/* reexport safe */ _commons__WEBPACK_IMPORTED_MODULE_2__.getPageCategory),
/* harmony export */   "getReferenceNode": () => (/* reexport safe */ _commons__WEBPACK_IMPORTED_MODULE_2__.getReferenceNode),
/* harmony export */   "insertIntoDOM": () => (/* reexport safe */ _commons__WEBPACK_IMPORTED_MODULE_2__.insertIntoDOM),
/* harmony export */   "isMobileDevice": () => (/* reexport safe */ _commons__WEBPACK_IMPORTED_MODULE_2__.isMobileDevice),
/* harmony export */   "isPrivateMode": () => (/* reexport safe */ _commons__WEBPACK_IMPORTED_MODULE_2__.isPrivateMode),
/* harmony export */   "parseTemplateString": () => (/* reexport safe */ _commons__WEBPACK_IMPORTED_MODULE_2__.parseTemplateString),
/* harmony export */   "removeEmptyKeys": () => (/* reexport safe */ _commons__WEBPACK_IMPORTED_MODULE_2__.removeEmptyKeys)
/* harmony export */ });
/* harmony import */ var _awarenessWidget__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./awarenessWidget */ "./src/helpers/awarenessWidget.js");
/* harmony import */ var _oneClickSelectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./oneClickSelectors */ "./src/helpers/oneClickSelectors.js");
/* harmony import */ var _commons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commons */ "./src/helpers/commons.js");





/***/ }),

/***/ "./src/helpers/oneClickSelectors.js":
/*!******************************************!*\
  !*** ./src/helpers/oneClickSelectors.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getOneClickSelectorsBySlug": () => (/* binding */ getOneClickSelectorsBySlug),
/* harmony export */   "getCheckoutBtnSelectorRef": () => (/* binding */ getCheckoutBtnSelectorRef)
/* harmony export */ });
/* harmony import */ var _commons__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./commons */ "./src/helpers/commons.js");


/* TODO: Remove this very specific logic. For VTEX legacy there should be a way to obtain this information in an standard way */

const DEVICE = _commons__WEBPACK_IMPORTED_MODULE_0__.isMobileDevice ? 'mobile' : 'desktop';

const ALLIES_DOM_SELECTORS_VTEXIO = {
    paymentButtonSelector: 'div.vtex-add-to-cart-button-0-x-buttonDataContainer'
}

const ALLIES_DOM_SELECTORS_BY_SLUG = {
    'boutiquemorangorosa-ecommerce': {
        paymentButtonSelector: 'a.buy-button.buy-button-ref'
    },
    'dogupet-ecommerce': {
        paymentButtonSelector: 'a.buy-in-page-button',
        qtyCounterSelector: 'div.quantitySelector > label > input'
    },
    'eufina-ecommerce': {
        desktop: {
            paymentButtonSelector: 'a.buy-button.buy-button-ref',
            qtyCounterSelector: 'input.qtds__input'
        },
        mobile: {
            paymentButtonSelector: 'a.buy-button.buy-button-ref'
        }
    },
    'vitrinedireta-ecommerce': {
        paymentButtonSelector: 'a.buy-button.buy-button-ref'
    },
    'keeprunning-ecommerce': {
        paymentButtonSelector: 'div.product_main-top--actions a.product_buy',
        qtyCounterSelector: 'input.product_quantity-input'
    },
    'addi': {
        paymentButtonSelector: 'a.buy-button.buy-button-ref',
        qtyCounterSelector: 'input.qtd.pull-left'
    },
    'addibr': {
        paymentButtonSelector: 'a.buy-button.buy-button-ref',
        qtyCounterSelector: 'input.qtd.pull-left'
    }
}

const getOneClickSelectorsBySlug = (allySlug) => {
    const allySelectors = ALLIES_DOM_SELECTORS_BY_SLUG[allySlug]?.[DEVICE] ?? ALLIES_DOM_SELECTORS_BY_SLUG[allySlug];

    return () => {
        const buttonList = document.querySelectorAll(allySelectors.paymentButtonSelector);
        if (!buttonList?.length) {
            return {};
        }

        let buttonHref = '';
        for (let button of buttonList) {
            const href = button.getAttribute('href');
            if (href.startsWith('/checkout/')) {
                buttonHref = href;
            }
        }

        if (!buttonHref) {
            return {};
        }

        const url = new URL(`${location.origin}${buttonHref}`);
        const sku = url?.searchParams?.get('sku');
        const seller = url?.searchParams?.get('seller');
        const qty = allySelectors.qtyCounterSelector ? document.querySelector(allySelectors.qtyCounterSelector)?.value : '1';

        return { 
            sku,
            seller,
            qty
        };
    }
}

const getCheckoutBtnSelectorRef = (vtexVersion, allySlug) => {
    if (vtexVersion === 'legacy') {
        return ALLIES_DOM_SELECTORS_BY_SLUG[allySlug]?.[DEVICE]?.paymentButtonSelector ??
        ALLIES_DOM_SELECTORS_BY_SLUG[allySlug]?.paymentButtonSelector
    }

    if (vtexVersion === 'io') {
        return ALLIES_DOM_SELECTORS_VTEXIO.paymentButtonSelector;
    }
}


/***/ }),

/***/ "./src/helpers/privateModeValidator.js":
/*!*********************************************!*\
  !*** ./src/helpers/privateModeValidator.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "detectIncognito": () => (/* binding */ detectIncognito)
/* harmony export */ });
/**
 *
 * detectIncognito v22.01.x - (c) 2022 Joe Rutkowski <Joe@dreggle.com> (https://github.com/Joe12387/detectIncognito)
 *
 * Incognito & Private Browsing detection
 *
 * Support: Safari for iOS   -- 8 to 15
 *          Safari for macOS <= 15
 *          Chrome/Chromium  -- 50 to 96
 *          Edge             -- 15 - 18; 79 to 96
 *          Firefox          -- 44 to 95
 *          MSIE             >= 10
 *
 **/
 const detectIncognito = function(callback) {
  var browserName = "Unknown";

  function __callback(isPrivate) {
    callback({
      isPrivate: isPrivate,
      browserName: browserName
    });
  }
  
  function identifyChromium() {
    var ua = navigator.userAgent;
    if (ua.match(/Chrome/)) {
      if (ua.match(/Edg/)) {
        return "Edge"
      } else if (navigator.brave !== undefined) {
        return "Brave";
      } else if (navigator.opr !== undefined) {
        return "Opera";
      }
      return "Chrome";
    } else {
      return "Chromium";
    }
  }
  
  function assertEvalToString(value) {
    return value === eval.toString().length;
  }
  
  function isSafari() {
    var v = navigator.vendor;
    return v !== undefined && v.indexOf("Apple") === 0 && assertEvalToString(37);
  }

  function isChrome() {
    var v = navigator.vendor;
    return v !== undefined && v.indexOf("Google") === 0 && assertEvalToString(33);
  }

  function isFirefox() {
    return document.documentElement !== undefined && document.documentElement.style.MozAppearance !== undefined && assertEvalToString(37);
  }

  function isMSIE() {
    return navigator.msSaveBlob !== undefined && assertEvalToString(39);
  }

  /**
   * Safari (Safari for iOS & macOS)
   **/

  function macOS_safari14() {
    try {
      window.safari.pushNotification.requestPermission("https://example.com", "private", {}, (function() {}));
    } catch (e) {
      return __callback(!new RegExp("gesture").test(e));
    }
    return __callback(false);
  }

  function iOS_safari14() {
    var tripped = false;
    var iframe = document.createElement("iframe");
    iframe.style.display = "none";
    document.body.appendChild(iframe);

    iframe.contentWindow.applicationCache.addEventListener("error", function() {
      tripped = true;
      return __callback(true);
    });

    setTimeout(function() {
      if (!tripped) {
        __callback(false);
      }
    }, 100);
  }

  function oldSafariTest() {
    var openDB = window.openDatabase;
    var storage = window.localStorage;
    try {
      openDB(null, null, null, null);
    } catch (e) {
      return __callback(true);
    }
    try {
      storage.setItem("test", "1");
      storage.removeItem("test");
    } catch (e) {
      return __callback(true);
    }
    return __callback(false);
  }

  function safariPrivateTest() {
    var w = window;
    if (navigator.maxTouchPoints !== undefined) {
      if (w.safari !== undefined && w.DeviceMotionEvent === undefined) {
        browserName = "Safari for macOS";
        macOS_safari14();
      } else if (w.DeviceMotionEvent !== undefined) {
        browserName = "Safari for iOS";
        iOS_safari14();
      } else {
        throw new Error("detectIncognito Could not identify this version of Safari");
      }
    } else {
      oldSafariTest();
    }
  }

  /**
   * Chrome
   **/

  function getQuotaLimit() {
    var w = window;
    if (w.performance !== undefined && w.performance.memory !== undefined && w.performance.memory.jsHeapSizeLimit !== undefined) {
      return performance.memory.jsHeapSizeLimit;
    }
    return 1073741824;
  }

  // >= 76
  function storageQuotaChromePrivateTest() {
    navigator.webkitTemporaryStorage.queryUsageAndQuota(
      function(usage, quota) {
        __callback(quota < getQuotaLimit());
      },
      function(e) {
        throw new Error("detectIncognito somehow failed to query storage quota: " + e.message);
      }
    );
  }

  // 50 to 75
  function oldChromePrivateTest() {
    var fs = window.webkitRequestFileSystem;
    var success = function() {
      __callback(false);
    };
    var error = function() {
      __callback(true);
    };
    fs(0, 1, success, error);
  }

  function chromePrivateTest() {
    if (Promise !== undefined && Promise.allSettled !== undefined) {
      storageQuotaChromePrivateTest();
    } else {
      oldChromePrivateTest();
    }
  }

  /**
   * Firefox
   **/

  function firefoxPrivateTest() {
    __callback(navigator.serviceWorker === undefined);
  }

  /**
   * MSIE
   **/

  function msiePrivateTest() {
    __callback(window.indexedDB === undefined);
  }

  function main() {
    if (isSafari()) {
      safariPrivateTest();
    } else if (isChrome()) {
      browserName = identifyChromium();
      chromePrivateTest();
    } else if (isFirefox()) {
      browserName = "Firefox";
      firefoxPrivateTest();
    } else if (isMSIE()) {
      browserName = "Internet Explorer";
      msiePrivateTest();
    } else {
      throw new Error("detectIncognito cannot determine the browser");
    }
  }

  main();
};


/***/ }),

/***/ "./src/services/oneClick.service.js":
/*!******************************************!*\
  !*** ./src/services/oneClick.service.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "oneClickCheckoutStart": () => (/* binding */ oneClickCheckoutStart)
/* harmony export */ });
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers */ "./src/helpers/index.js");


/**
 * @typedef {Object} ProductData
 * @property {number} sku - The ID of the selected SKU
 * @property {number} qty - The amount of products to be added to the cart
 * @property {string} seller - The seller ID of the product
 * @property {any} orderForm - The current "OrderForm"
 */

/**
 * @typedef {Object} SkuData
 * @property {number} id - The ID of the selected SKU added to the cart
 * @property {string} description - It is the name of the selected SKU. It could change depending of the modifiers of the product.
 * @property {string} value - The "formated" value of the product, i.e: "$100.000"
 * @property {string} imageUrl - The URL of image related to the selected SKU
 */

/**
 * @typedef {Object} SelectedItem
 * @property {string} orderFormId - The ID of the current order form
 * @property {string} allySlug - It is the ally slug identifier
 * @property {string} merchantDomain - Current merchant domain where the website is running
 * @property {SkuData} selectedItem - The information of the currently selected item
 * @property {any} orderDetails - The current "OrderForm"
 */

const VTEX_COOKIES = {
    macId: () => (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.getCookie)('VtexRCMacIdv7'),
    sessionId: () => (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.getCookie)('VtexRCSessionIdv7'),
};


/**
 * 
 * @param event Contains information of the event to start the checkout process by adding the item to the cart.
 * The event should contain a "detail" property with another inside of it called "selectedItem" that is a callback function
 * that shoould be called once the process to add the first item is completed to continue with the checkout process
 */
async function oneClickCheckoutStart(event, slug) {
    const selectedItemCb = event?.detail?.selectedItem;
    
    const IS_BROWSER_PRIVATE_MODE = await (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.isPrivateMode)();

    if (!selectedItemCb) {
        console.log('[ADDI] There is no way no notify the selected item');
        return selectedItemCb('ErrorUnexpected', null);
    }

    if (IS_BROWSER_PRIVATE_MODE) {
        console.log('[ADDI] Flash is not supported in icongnito mode')
        alert('[ADDI] Flash is not supported in icongnito mode');
        return selectedItemCb('ErrorIncognitoModeNotAllowed', null);
    }

    const domain = location.origin;

    const data = await oneClickCheckoutProductData(slug, domain);
    if (!data) {
        console.log(`[ADDI] Is not possible to read the selected SKU, quantity or seller. The checkout can't start`);
        return selectedItemCb('ErrorNoSkuOrQuantity', null);
    }

    const { sku, qty, seller, orderForm } = data;
    const { orderFormId } = orderForm;

    // Clear OrderForm messages before continue
    await oneClickClearMessages(domain, orderFormId);


    const index = orderForm?.items?.findIndex(item => item.id === sku)
    const shouldRemoveItem = index >= 0;

    // REMOVE, if needed
    if (shouldRemoveItem) {
        const orderFormRemovedItem = await oneClickRemoveItemFromCart(domain, orderFormId, sku, seller, index);
        if (!orderFormRemovedItem) {
            console.log(`[ADDI] Something went wrong removing the current item from the cart`);
            return selectedItemCb('ErrorRemovingItem', null);
        }
    
        if (orderFormRemovedItem.messages.length) {
            console.log('[ADDI] Something is not right after trying to remove the item. Please check the messages');
            return selectedItemCb('ErrorRemovingItem', null);
        }
    }


    // ADD ITEM TO CART
    const orderFormAddedItem = await oneClickAddItemToCart(domain, orderFormId, sku, qty, seller);

    if (!orderFormAddedItem) {
        console.log(`[ADDI] Something went wrong adding the item to the cart`);
        return selectedItemCb('ErrorAddingItem', null);
    }

    // Item out of stock
    if (orderFormAddedItem?.messages?.some(message => message.code === 'withoutStock')) {
        const indexRemove = orderFormAddedItem?.items?.findIndex(item => item.id === sku);
        await oneClickRemoveItemFromCart(domain, orderFormId, sku, seller, indexRemove);
        console.log('[ADDI] Selected item out of stock');
        return selectedItemCb('ErrorItemOutOfStock', null);
    }
    
    if (orderFormAddedItem?.messages?.length) {
        console.log('[ADDI] Something is not right after trying to add the item. Please check the messages');
        return selectedItemCb('ErrorAddingItem', null);
    }

    const selectedItem = oneClickGetSkuData(sku);

    selectedItemCb('Ok', {
        getCheckoutData: createGetCheckoutDataCaller(slug, selectedItem),
        apiCaller: createApiCaller(),
    });
}

/**
 * This method creates a function to allow the widget to get at any time the current information of the checkout data
 * @param {string} slug It is the ally slug identifier
 * @param {SelectedItem} selectedItem The information of the currently selected item
 * @returns Returns an async function that will be passed to the widget in order to get the checkout data
 */
function createGetCheckoutDataCaller(slug, selectedItem) {
    return async () => {
        const apiCaller = createApiCaller();
        const response = await apiCaller('/api/checkout/pub/orderForm?refreshOutdatedData=true', 'POST', null, 'json');

        const orderDetails = response.success ? response.payload : {};

        return {
            orderFormId: orderDetails.orderFormId,
            allySlug: slug,
            merchantDomain: location.origin,
            selectedItem: selectedItem,
            orderDetails: orderDetails,
        }
    }
}

/**
 * This method creates a function to allow the widget to have direct communication with the endpoints of the e-commerce
 * @returns Returns an async function that will be passed to the widget in order to allow direct communication with the API's
 */
function createApiCaller() {
    return async (endpoint, method, body, type) => {

        const endpointPath = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.parseTemplateString)(endpoint, VTEX_COOKIES);

        const contentType = {
            'json': 'application/json',
            'text': 'application/text',
            'form': 'application/x-www-form-urlencoded',
        };

        const bodyParser = body => type === 'json' ? JSON.stringify(body) : body;

        const headers = {};

        if (contentType[type]) {
            headers['Content-Type'] = contentType[type];
        }

        const responseParser = async (response) => {
            if (!response.ok) {
                return {
                    success: false,
                    status: response.status,
                    statusText: await response.text(),
                }
            }

            const contentType = response?.headers?.get('Content-Type') ?? '';

            const payload = {
                ...contentType.includes('json') ? { payload: await response.json() } : {},
                ...contentType.includes('text') ? { payload: await response.text() } : {},
            }

            return { success: true, ...payload };
        }

        return await fetch(`${location.origin}${endpointPath}`, {
            method: method,
            headers: headers,
            ...(body ? { body: bodyParser(body) } : {})
        }).then(responseParser).catch(e => e);
    }
}

/**
 * 
 * This is a temporary method that will retrieve the information of the selected SKU + quantity
 * @param {string} slug The ALLY SLUG
 * @param {string} domain Current domain of the website
 * @returns {ProductData | undefined} It should return the product data in order to continue
 * or undefined if the information can not be found for some reason. In that case, the checkout process will not continue
 */
async function oneClickCheckoutProductData(slug, domain) {
    const selector = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.getOneClickSelectorsBySlug)(slug);
    if (!selector) {
        return;
    }

    const orderForm = await oneClickGetOrderForm(domain);

    const { sku, qty, seller } = selector();

    const isDataComplete = [sku, qty, seller, orderForm].every(current => !!current);

    if (!isDataComplete) {
        return;
    }

    return { sku, qty, seller, orderForm };
}

/**
 * 
 * @param {string} domain Current domain of the merchant's site
 * @returns {Promise<any>} A promise of the call to the endpoint that adds the item to the cart. The promise returns the OrderForm or null if it fails
 */
async function oneClickGetOrderForm(domain) {
    return await fetch(`${domain}/api/checkout/pub/orderForm?refreshOutdatedData=true`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
    }).then(response => response.json());
}

/**
 * 
 * @param {string} domain Current domain of the merchant's site
 * @param {string} orderFormId The orderFormId of the current order
 * @param {string} id SKU id of the current item that will be added to the 
 * @param {number} quantity Amount of items that will be added to the cart
 * @param {string} seller Is the identification of the seller of the product
 * @returns {Promise<any>} A promise of the call to the endpoint that adds the item to the cart. The promise returns the OrderForm or null if it fails
 */
async function oneClickAddItemToCart(domain, orderFormId, id, quantity, seller) {
    return await fetch(`${domain}/api/checkout/pub/orderForm/${orderFormId}/items`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ orderItems: [ { id, quantity, seller } ] })
    }).then(response => response.json()).catch(e => null);
}

/**
 * 
 * @param {string} domain Current domain of the merchant's site
 * @param {string} orderFormId The orderFormId of the current order
 * @param {string} id SKU id of the current item that will be added to the 
 * @param {number} quantity Amount of items that will be added to the cart
 * @param {string} seller Is the identification of the seller of the product
 * @param {number} index Is the
 * @returns {Promise<any>} A promise of the call to the endpoint that adds the item to the cart. The promise returns the OrderForm or null if it fails
 */
 async function oneClickRemoveItemFromCart(domain, orderFormId, id, seller, index) {
    return await fetch(`${domain}/api/checkout/pub/orderForm/${orderFormId}/items/update`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ noSplitItem: true, orderItems: [ { id, quantity: 0, seller, index, hasBundleItems: false } ] })
    }).then(response => response.json()).catch(e => null);
}

/**
 * 
 * @param {*} domain Current domain of the merchant's site
 * @param {*} orderFormId The orderFormId of the current order
 * @returns {Promise<any>} A promise of the call to the endpoint that adds the item to the cart. The promise returns the OrderForm with the messages array empty
 */
async function oneClickClearMessages(domain, orderFormId) {
    return await fetch(`${domain}/api/checkout/pub/orderForm/${orderFormId}/messages/clear`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: '{}'
    }).then(response => response.json()).catch(e => null);
}


/**
 * 
 * @param {string} sku SKU id of the current item that will be added to the cart
 * @returns {SkuData} An object containing the data of the selected SKU
 */
function oneClickGetSkuData(sku) {
    const data = skuJson.skus.find(current => current.sku === +sku);

    if (!data) return null;

    return {
        id: data.sku,
        description: data.skuname,
        value: data.fullSellingPrice,
        imageUrl: data.image
    };
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers */ "./src/helpers/index.js");
/* harmony import */ var _services_oneClick_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./services/oneClick.service */ "./src/services/oneClick.service.js");




(function(){
    
    /**
     * * * * * * 
     * * * GLOBAL VARIABLES
     * * * * * * 
    */

    const vtexVersion = window?.__RUNTIME__?.accountId ? 'io' : 'legacy';
    const vtexPageCategory = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.getPageCategory)();
    const addiScriptTag = document.querySelector('script[data-id][data-name="vtexAddiWidget"]');

    const ecommerceConfig = {
        allySlug: addiScriptTag.getAttribute('data-ally-slug'),
        IOevents: {
            productClick: 'vtex:productClick',
            productView: 'vtex:productView'
        }
    };

    const homeBannerConfig = {
        showBanner: false,
        bannerId: '',
        htmlElementRef: null
    };

    const awarenessWdgConfig = {
        productPrice: null,
        customCSS: {},
        htmlElementRef: null,
        genericSelectorsRef: [
            '.product__price',
            '.precioProducto',
            '.precio',
            '.plugin-preco',
            '.productPrice',
            '.price-box',
            '.priceProduct',
            '.seletor-sku'
        ]
    };

    const expeditedCheckoutWdgConfig = {
        htmlElementRef: null,
        genericSelectorsRef: [
            (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.getCheckoutBtnSelectorRef)(vtexVersion, ecommerceConfig.allySlug)
        ]
    };

    /**
     * * * * * * 
     * * * IMPORTS
     * * * * * * 
    */

        /**
         * Import the needed bundles to render components depending on 
         * page type (Home | Product)
         * @returns {void}
         */
        function importWidgetsBundles() {
            const chunksByPage = {
                'Home': [
                    'addi-home-banner-br',
                ],
                'Product': [
                    'addi-widget-br',
                    'addi-banner-br',
                    'addi-onboarding-br',
                    'addi-one-click-checkout-br',
                ]
            }

            const chunks = chunksByPage[vtexPageCategory];
            if (!chunks) {
                return;
            }

            chunks.forEach(bundle => {
                const scriptElement = document.createElement('script');
                scriptElement.src = `https://s3.amazonaws.com/widgets.addi.com/bundle_${bundle}.min.js`;
                // scriptElement.src = `https://localhost:5501/bundle_${bundle}.min.js`;
                document.head.append(scriptElement);
            });

        }

    /**
     * * * * * * 
     * * * EVENT LISTENERS
     * * * * * * 
    */

        /**
         * Subscribe the event listeners according to page type and Vtex version
         * @returns {void}
         */
        const subscribeEventListeners = () => {
            if (vtexPageCategory === 'Product') {
                if (vtexVersion === 'legacy') return addLegacyListeners();
                if (vtexVersion === 'io') return addIOListeners();
            }

            return addCommonListeners();
        }

        /**
         * Subscribe the event listeners valid for Vtex Legacy Version
         * @returns {void}
         */
        const addLegacyListeners = () => {
            try {
                var batchBuyListener = new Vtex.JSEvents.Listener('batchBuyListener', runProductPageComponentsLegacy);
                skuEventDispatcher && skuEventDispatcher.addListener(skuDataReceivedEventName, batchBuyListener);
            } catch (e) {
                console.log('[ADDI] Something when wrong trying to subscribe a Vtex Batch Listener ', e);
            }

            window.addEventListener('skuSelected.vtex', runProductPageComponentsLegacy);

            document.addEventListener('readystatechange', event => {
                if (event.target.readyState === 'complete') {
                    runProductPageComponentsLegacy();
                    return;
                }
            });

        }

        /**
         * Subscribe the event listeners valid for Vtex IO Version
         * @returns {void}
         */
        const addIOListeners = () => {
            
            const vtexEventHandler = (event) => {
                const eventData = event.data;
                if (eventData.eventName === ecommerceConfig.IOevents.productView) {
                    runProductPageComponentsIO(eventData);
                    return;
                }
            };

            window.addEventListener('message', vtexEventHandler);
        }

        /**
         * Subscribe the event listeners valid for both Vtex Legacy and IO Version
         * @returns {void}
         */
        const addCommonListeners = () => {
            document.addEventListener('readystatechange', event => {
                if (event.target.readyState === 'complete') {
                    runHomePageComponents();
                    return;
                }
            });
        }

    /**
     * * * * * * 
     * * * METHODS
     * * * * * * 
    */
        /**
         * Run the actions to create and executes ADDI components in the Home Page for Vtex Legacy/IO
         * @returns {void} doesn't return anything
         */
        const runHomePageComponents = () => {
            displayHomeBanner();
        }

        /**
         * Run the actions to create and executes ADDI components in the Product Page for Vtex Legacy
         * @returns {void} doesn't return anything
         */
        const runProductPageComponentsLegacy = () => {
            const productData = window.skuJson || {};
            const productInfo = productData.skus && productData.skus.find(sku => sku.available);
            const decimalDigits = window.decimalDigits || 0;
            
            awarenessWdgConfig.productPrice = productInfo.bestPrice / (10 ** decimalDigits);

            displayAwarenessWidget();
            displayExpeditedCheckoutWidget();
        }

        /**
         * Run the actions to create and executes ADDI components in the Product Page for VtexIO
         * @returns {void} doesn't return anything
         */
        const runProductPageComponentsIO = (data) => {
            const { selectedSku, sku } = data?.product;
            const productData = selectedSku ?? sku;
            const productInfo = productData.sellers && productData.sellers.find(s => s?.commertialOffer?.AvailableQuantity);
            const decimalDigits = window.decimalDigits || 0;
            
            awarenessWdgConfig.productPrice = productInfo.commertialOffer.Price / (10 ** decimalDigits);

            displayAwarenessWidget();
            displayExpeditedCheckoutWidget();
        }

        
    /**
     * * * * * * 
     * * * RENDER FUNCTIONS
     * * * * * * 
    */

        /**
         * Gets the needed config for the HomeBanner component and call to render
         * @returns {void} doesn't return anything
         */
        const displayHomeBanner = () => {
            homeBannerConfig.showBanner = addiScriptTag.getAttribute('data-show-banner') === 'true';
            homeBannerConfig.bannerId = addiScriptTag.getAttribute('data-banner-id');
            homeBannerConfig.htmlElementRef = addiScriptTag.getAttribute('data-banner-element-reference');

            renderHomeBanner(ecommerceConfig.allySlug, homeBannerConfig);
        }

        /**
         * Create the HomeBanner component element and insert it into the DOM
         * @param {string} allySlug the allySlug of the ecommerce
         * @param { homeBannerConfig } homeBannerConfig the homeBanner settings 
         * @returns {void} doesn't return anything
         */
        function renderHomeBanner(allySlug, { bannerId, htmlElementRef }) {
            const currentHomeBanner = document.querySelector('addi-home-banner-br')
            currentHomeBanner && currentHomeBanner.remove();
            
            const addiHomeBanner = document.createElement('addi-home-banner-br');

            if (bannerId) {
                addiHomeBanner.setAttribute('ally-slug', allySlug);
                addiHomeBanner.setAttribute('banner-id', bannerId);
            }

            (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.insertIntoDOM)(addiHomeBanner, htmlElementRef);
        }

        /**
         * Gets the needed config for the AwarenessWidget component and call to render
         * @returns {void} doesn't return anything
         */
        const displayAwarenessWidget = () => {        
            if (!awarenessWdgConfig?.htmlElementRef) {
                const selectorFromTag = addiScriptTag.getAttribute('data-element-reference');
                const htmlElementRef = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.getReferenceNode)(selectorFromTag, awarenessWdgConfig.genericSelectorsRef);
            
                if (!htmlElementRef) {
                    console.log(`[ADDI - Awareness Widget] No Element Node was found for the selector ${selectorFromTag}`);
                    return;
                }
            
                awarenessWdgConfig.htmlElementRef = htmlElementRef;
            }

            if (!awarenessWdgConfig?.productPrice) {
                console.log('[ADDI - Awareness Widget] Product price is invalid same');
                return;
            }

            if (!awarenessWdgConfig?.customCSS) {
                awarenessWdgConfig.customCSS = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.getAwarenessWidgetCustomStyles)(addiScriptTag);
            }

            renderAwarenessWidget(ecommerceConfig.allySlug, awarenessWdgConfig);
        }

        /**
         * Create the AwarenessWidget component element and insert it into the DOM
         * @param {string} allySlug the allySlug of the ecommerce
         * @param {awarenessWdgConfig} awarenessWdgConfig the awareness widget settings 
         * @returns {void} doesn't return anything
         */
        const renderAwarenessWidget = (allySlug, { productPrice, customCSS, htmlElementRef }) => {
            const currentAddiWidget = document.querySelector('addi-widget-br')
            currentAddiWidget && currentAddiWidget.remove();

            const addiWidget = document.createElement('addi-widget-br');
        
            addiWidget.setAttribute("ally-slug", allySlug);
            addiWidget.setAttribute("price", productPrice);
            addiWidget.setAttribute("custom-widget-styles", customCSS);
                
            (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.insertIntoDOM)(addiWidget, htmlElementRef);
        }

        /**
         * Gets the needed config for the ExpeditedCheckoutWidget component and call to render
         * @returns {void} doesn't return anything
         */
        const displayExpeditedCheckoutWidget = () => {
            if (!expeditedCheckoutWdgConfig?.htmlElementRef) {
                const selectorFromTag = addiScriptTag.getAttribute('data-checkout-element-reference');
                const htmlElementRef = (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.getReferenceNode)(selectorFromTag, expeditedCheckoutWdgConfig.genericSelectorsRef);
                
                if (!htmlElementRef) {
                    console.log(`[ADDI - Expedited Widget] No Element Node was found for the selector ${selectorFromTag}`);
                    return;
                }
               
                expeditedCheckoutWdgConfig.htmlElementRef = htmlElementRef;

                if(htmlElementRef.tagName !== 'DIV') {
                    expeditedCheckoutWdgConfig.htmlElementRef = htmlElementRef.parentElement;
                }
            }

            renderExpeditedCheckoutWidget(ecommerceConfig.allySlug, expeditedCheckoutWdgConfig);
        }

        /**
         * Create the AddiOneClickCheckout component element and insert it into the DOM
         * @param {string} allySlug the allySlug of the ecommerce
         * @param { expeditedCheckoutWdgConfig } expeditedCheckoutWdgConfig the expedited checkout widget settings 
         * @returns {void} doesn't return anything
         */
        const renderExpeditedCheckoutWidget = (allySlug, { htmlElementRef }) => {
            const currentOneClickWidget = document.querySelector('addi-one-click-checkout-br')
            currentOneClickWidget && currentOneClickWidget.remove();
            
            const oneClickWidget = document.createElement('addi-one-click-checkout-br');
            
            oneClickWidget.setAttribute("ally-slug", allySlug);
            oneClickWidget.addEventListener('checkoutStarted', (event) => {
                (0,_services_oneClick_service__WEBPACK_IMPORTED_MODULE_1__.oneClickCheckoutStart)(event, allySlug);
            });
                
            (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.insertIntoDOM)(oneClickWidget, htmlElementRef);
        }
        
    /**
     * * * * * * 
     * * * * INITIALIZER 
     * * * * * * 
    */

        /**
         * Excecute the script
         * @returns {void}
         */
        const onInit = () => {
            subscribeEventListeners();
            importWidgetsBundles();
        }

        onInit();

})();

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,